from multiprocessing.sharedctypes import Value


class Node:
    def __init__(self, value, next_node = None):
        self.value = value
        self.next_node = next_node
    
    def get_value(self):
        return self.value
    
    def get_next_node(self):
        return self.next_node
    
    def change_value(self, value):
        self.value = value
    
    def change_next_node(self, node):
        self.next_node = node
    
    

class Linkedlist:
    def __init__(self, value = None): #creates a head nodeto start a list
        self.head_node = Node(value)

    def get_head_node(self,): # shows what the head node is in memory
        return self.head_node
    
    def insert_beginning(self, new_value): 
       new_node = Node(new_value)
       new_node.change_next_node(self.head_node)
       self.head_node = new_node

    def list_list(self):
        string_list = ""
        current_node = self.get_head_node()
        while current_node:
            if current_node.get_value() != None:
                string_list += str(current_node.get_value()) + '\n'
            current_node = current_node.get_next_node()
        return string_list

def adding_to_the_linked_list():
    node_value = input('Please enter a value for the node:   ')
    eval(f'll.insert_beginning({node_value})')

def swaping_nodes(linked_nodes, val1, val2):
    print(f'Swapping {val1} with {val2}')

    node1 = linked_nodes.head_node
    node2 = linked_nodes.head_node
    prev_node1 = None
    prev_node2 = None

    if val1 == val2:
        print('Elements are the same - no swap needed')
        return
    
    while node1 is not None: #looks through node1 for val1
        if node1.get_value() == val1:
            break
        prev_node1 = node1
        node1 = node1.get_next_node()
    
    while node2 is not None: #looks through node2 for val2
        if node2.get_value() == val2:
            break
        prev_node2 = node1
        node2 = node2.get_next_node()
    
    if (node1 is None or node2 is None):
        print("Swap not possible - one or more element is not in the list")
        return
        
    if prev_node1 is None:
        linked_nodes.head_node = node2
    else:
        prev_node1.change_next_node(node2)
    
    if prev_node2 is None:
        linked_nodes.head_node = node1
    else:
        prev_node2.change_next_node(node1)
    
    temp = node1.get_next_node()
    node1.change_next_node(node2.get_next_node())
    node2.change_next_node(temp)



node = Linkedlist(1)
for i in range(20):
    node.insert_beginning(i)

print(node.list_list())

swaping_nodes(node, 9,5)

print(node.list_list())


